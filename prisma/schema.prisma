// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  membershipId  String?
  membership    Membership?    @relation(fields: [membershipId], references: [id])
  profiles      Profile[]
  sagas         Saga[]
  authProviders AuthProvider[]
}

model AuthProvider {
  id         String           @id @default(uuid())
  provider   AuthProviderType
  providerId String
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  createdAt  DateTime         @default(now())

  @@unique([provider, providerId])
}

model Membership {
  id                       String         @id @default(uuid())
  name                     String
  type                     MembershipType
  max_profiles             Int
  max_devices              Int
  content_quality          VideoQuality
  ads_enabled              Boolean
  can_comment              Boolean
  can_rate                 Boolean
  movie_requests_per_day   Int
  series_requests_per_week Int
  has_real_time_rooms      Boolean
  has_linktree_profile     Boolean
  has_chatbot              Boolean
  has_notifications        Boolean
  users                    User[]
}

model Profile {
  id        String   @id @default(uuid())
  name      String
  avatarUrl String
  isPrimary Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Saga {
  id     String  @id @default(uuid())
  name   String
  userId String
  user   User    @relation(fields: [userId], references: [id])
  movies Movie[]
}

model Movie {
  id          String       @id @default(uuid())
  title       String
  description String
  releaseYear Int
  duration    Int
  quality     VideoQuality
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sagaId      String?
  saga        Saga?        @relation(fields: [sagaId], references: [id])
  genres      MovieGenre[]
}

model Series {
  id          String        @id @default(uuid())
  title       String
  description String
  releaseYear Int
  quality     VideoQuality
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  seasons     Season[]
  genres      SeriesGenre[]
}

model Season {
  id           String    @id @default(uuid())
  seasonNumber Int
  seriesId     String
  series       Series    @relation(fields: [seriesId], references: [id])
  episodes     Episode[]
}

model Episode {
  id            String @id @default(uuid())
  episodeNumber Int
  title         String
  duration      Int
  seasonId      String
  season        Season @relation(fields: [seasonId], references: [id])
}

model Genre {
  id     String        @id @default(uuid())
  name   String
  movies MovieGenre[]
  series SeriesGenre[]
}

model MovieGenre {
  movieId String
  genreId String
  movie   Movie  @relation(fields: [movieId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@id([movieId, genreId])
}

model SeriesGenre {
  seriesId String
  genreId  String
  series   Series @relation(fields: [seriesId], references: [id])
  genre    Genre  @relation(fields: [genreId], references: [id])

  @@id([seriesId, genreId])
}

enum VideoQuality {
  SD
  HD
  FULL_HD
  UHD_4K
}

enum MembershipType {
  BASIC
  STANDARD
  PREMIUM
}

enum AuthProviderType {
  GOOGLE
  LOCAL
}
